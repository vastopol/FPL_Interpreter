FP_REPL Interaction Guide
The "comprehensive" guide to FP_REPL syntax.

LANGUAGE SYNTAX
///*****************************************

~  = undefined

() = used for separation

application
    f:a
    where   function f applied to value a
    
composition  
    f.g
    where   (f.g):x = f:(g:x)
    
construction (ON THE FLY...)
    where   [1,2,3]  =  {1,2,3}
    
setting
    where  a = 4
        set element a to value 4
    where  c = [4,5,6]
        name and construct new sequence c
    where x = y
        set one unit to the other (if same type)
    
apply-to-all  @f       
    where   @f:{x1,...,xn}  =  {f:x1,...,f:xn}
    
    
condition 
    (h -> f,g)    
    where   (h -> f,g):x   
             =  f:x   if   h:x  =  T
             =  g:x   if   h:x  =  F
             =  ~    otherwise

///*****************************************


SYSTEM CALLS (for memory management)
///******************************************

def == the definition function

syntax: def name = value

where element
   name = atom   
   x = 3
   
OR

where sequence
   name = {atom,...,atom}   
   s = {1,2,3}
   
   NO SPACES BETWEEN COMMAS
//----------------------------------------

rm  == delete variable from memory

syntax: rm var

//----------------------------------------

ls == prints contents of memory stored variables

syntax: ls

///*********************************************


EVALUATION
///*********************************************

Evaluation is invoked with the special symbol '#'
When the '#' is the first character in the input string,
evaluation is called on the sequence of characters immediately after.
eg.
>>> #F:x
evaluate("F:x").
evaluate(apply function f to variable x).
return result.

///*********************************************
