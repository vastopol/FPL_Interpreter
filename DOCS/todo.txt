TODO - Unfinished works
-------------------------

* PRIMITIVE LANGUAGE OPERATIONS (not implemented yet)

apply-to-all
    "@"

    where   @F:<x1,...,xn>  =  <F:x1,...,F:xn>
------------------------------------------------

construction combining form
    "[F1,F2,...,Fn]"

    where   [F1,F2,...,Fn]:x  =  <F1:x,...,Fn:x>
------------------------------------------------

conditial branch
    "(H -> F,G)"

    where   (H -> F,G):x
             =  F:x   if   H:x  =  True
             =  G:x   if   H:x  =  False
             =  undefined  otherwise

///*****************************************

=======================================================================

VERSION 2.0

* add the {} environment part

expression format -> functions:{arg1;arg2}

unlimited function composition applied to argument enclosure
either 1 or 2 arguments in braces, semicolon is argument separator

# single arg
F:{1}
F:{<1,2,3>}

# two arg
F:{1;2}
F:{<1,2,3>;<4,5,6>}
F:{1;<7,8,9>}

# nested
F:{ G:{x} ; H:{y} }

//---------------------------------------------

* action.h/cpp -> complex tree traversal on AST nodes for "@", "[]", && conditionals

* func.h/cpp -> add more functions for the vm fn_pointers from the math.h library

* convert all to floating point

//---------------------------------------------

MAYBE...
* possibly add a write function
write_ln()
this should write one line of text to the execution buffer -> Syscom


=======================================================================


//---------------------------------------------

possible logic functions

universals:
id  = identity

bools:
elm = ? is element
seq = ? is sequence
nil = ? is empty sequence
lt  = less than
gt  = greater than
eq  = equal to
lte = less than or equal
gte = greater than or equal
neq = not equal

//---------------------------------------------
