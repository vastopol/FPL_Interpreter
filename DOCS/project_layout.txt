System Design && Layout
rough outlines
//------------------------


SYSCOM:
"syscom.h" is a set of functions which are responsible for the basic user interactions with the memory and system.
The syscoms make up the operations in the outer interpreter which is mainly responsible for managing memory and the buffer.
The outer interpreter acts as the interface to the inner interpreter, which is not directly accessable.
It passes an input string and the memory block to the inner interpreter, then collects the result.


//-----------------------------------------------------------------

SYSCOM BRANCH STRUCTURE -> happens in call to com()
- exit
- clear
- help
- fcts
- print
- def
- let
- set
- rm
- mem
- memdump
- buf
- bufdump
- load
- run
- gentree
- system call
- eval

//-----------------------------------------------------------------


CLASSES
- Pattern == compositional object / mediator
- Memory == data structure -> hold user defined objects variables/macros
- Object == AST objects
- Node == data structure -> form of the abstract syntax tree, hold Object*
- Interpreter ==  parsing
- Action ==  execution


On construction Pattern is initialized with an input string and a reference to the Memory object.
The Node pointer will initially be NULL.

Pattern
{
    string input;   // user input
    Memory* mem;    // variable container
    Node* root;     // root of abstract syntax tree
    Interpreter* I; // for parsing
    Action* A;      // for executing

    // constructor, set, get, etc...
}

Memory
{
    map<string, int> elements;
    map<string, list<int> > sequences;
    map<string, string> macros;

    // constructor, set, get, print, etc...
}

Node
{
    Object* key;
    Node *parent, *left, *right;

    // constructor, set, get, etc...
}


Interpreter
{
    Node* parse(std::string);

    // helper functions
}


Action
{
    exec(Node*);

    // helper functions
}


Object
{

* object.h/cpp -> base class
    - function
    - sequence
    - element
    - colon   ':' the apply links the other parts  (might not need to be a class)
    - block    chunk of data to call parse on again

    // NOTE -> nodes hold object pointer
}

