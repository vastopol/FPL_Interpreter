FP_REPL Interaction Primer
The "comprehensive" guide to syntax.
//-----------------------------------


LANGUAGE COMPONENTS
///****************************************************************************

elements: x
sequences: <x1,...,xn>

sequences are collections of elements

() = used for separation

///****************************************************************************


PRIMITVE OPERATIONS
///****************************************************************************

application  "F:x"

    where   function F applied to value x
------------------------------------------------

composition   "F.G"

    where   (F.G):x = F:(G:x)
------------------------------------------------

///****************************************************************************


ELEMENT OPERATIONS
///****************************************************************************

RETURN TYPE (ELEMENT)
---------------------------------------
neg == negate, take opposite sign of number
abs == take absolute value of number
inc == increment (plus 1)
dec == decrement (minus 1)
square == second power
cube == third power
sqrt == square root

RETURN TYPE (SEQUENCE)
---------------------------------------
genlist == list from 1 to n
ones    == list of n ones
zeros   == list of n zeros

///****************************************************************************


SEQUENCE OPERATIONS
///****************************************************************************

RETURN TYPE (ELEMENT)
---------------------------------------
size  == number of elements in list
head  == first element of sequence
lmax  == maximum value in sequence
lmin  == minimum value in sequence
sum   == add the elements of a sequence together
prod  == multiply the elements of a sequence together

RETURN TYPE (SEQUENCE)
---------------------------------------
tail  == sequence from second to end
rotl  == rotate sequence elements to the left
rotr  == rotate sequence elements to the right
popl  == pop element from left of sequence
popr  == pop element from right of sequence
rev   == reverse the order of a sequence
sort  == sort sequence into ascending order
rmdup == remove duplicates, preserves order
+     == add first 2 elements of a sequence
-     == subtract first 2 elements of a sequence
*     == multiply first 2 elements of a sequence
/     == divide first 2 elements of a sequence
%     == modulo first 2 elements of a sequence

///****************************************************************************


GUIDELINES ON PROGRAMMING
///****************************************************************************

- Use let to create and label variables
- Use def to create and label new function compositions
- Each new function or variable should have a unique name
- Avoid having multiple variables of different types with same name

///****************************************************************************


APPLICATION EXAMPLES
///****************************************************************************

>>>  def last = head.rev    # returns last element

>>>  def g = rotl.popl

>>>  let x = <1,2,3,4>

>>>  g:x
     rotl.popl:<1,2,3,4>
     rotl:(popl:<1,2,3,4>)
     rotl:<2,3,4>
<<<  <3,4,2>

------------------------------------------------

>>> def second = head.tail

>>>  let lst = <0,1,2,3,4,5,6,7,8,9>

>>>  neg.second:lst
     neg.head.tail:<0,1,2,3,4,5,6,7,8,9>
     neg:(head:(tail:<0,1,2,3,4,5,6,7,8,9>))
     neg:(head:<1,2,3,4,5,6,7,8,9>)
     neg:1
<<<  -1

///****************************************************************************


F:x

G:(F:x)

H:(I:(J:x))

K:(L:(M:(N:x)))

etc...
