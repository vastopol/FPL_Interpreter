
FPL Syntax
//---------------------------------------

LANGUAGE COMPONENTS
//---------------------------------------

elements: x
sequences: <x1,...,xn>

sequences are collections of elements

() = used for separation

//---------------------------------------


PRIMITVE OPERATIONS
//---------------------------------------

application  "F:x"

    where   function F applied to value x
//---------------------------------------

composition   "F.G"

    where   (F.G):x = F:(G:x)
//-------------------------------------

ELEMENT OPERATIONS

RETURN TYPE (ELEMENT)
neg == negate, take opposite sign of number
abs == take absolute value of number
inc == increment (plus 1)
dec == decrement (minus 1)
square == second power
cube == third power
sqrt == square root
not  == logical not
odd  == test is odd
even == test is even
zero == test is zero
~1   == constant zero
~0   == constant one
log  == log base 10

RETURN TYPE (SEQUENCE)
intsto  == list from 1 to n
ones    == list of n ones
zeros   == list of n zeros
list    == create a list around an element

//---------------------------------------

SEQUENCE OPERATIONS

RETURN TYPE (ELEMENT)
head  == first element of sequence
size  == number of elements in list
max   == maximum value in sequence
min   == minimum value in sequence
sum   == add the elements of a sequence together
prod  == multiply the elements of a sequence together
nil   == check for empty list
gcd   == greatest common divisor
(eq,neq,gt,lt,gte,lte) == act on first 2 elements

RETURN TYPE (SEQUENCE)
tail  == sequence from second to end
popl  == pop element from left of sequence
popr  == pop element from right of sequence
rotl  == rotate sequence elements to the left
rotr  == rotate sequence elements to the right
rev   == reverse the order of a sequence
sort  == sort sequence into ascending order
rmdup == remove duplicates, preserves order
(+,-,*,/,%,^) == act on first 2 elements

//---------------------------------------

HIGHER ORDER FUNCTIONS/OPERATORS

id   == identity
elm  == check is type Element
seq  == check is type Sequence
map{f}  == apply function f to each element of list
filt{p} == filter elements that fail predicate p from list
at{i}   == get element at index i from list
apr{e}  == append element at right of list
apl{e}  == append element at left of list
cat{l}  == concatenate 2 lists
if{p;f;g}  == if p is true, then apply f else apply g
while{p;f} == while p is true, apply f
do{i;f}    == apply f to argument i times
ccf{f1;...;fn}  == list of <f1:x,...,fn:x>

//---------------------------------------


GUIDELINES ON PROGRAMMING
//---------------------------------------

- Use let to create and label variables
- Use def to create and label new function compositions
- Each new function or variable should have a unique name
- Avoid having multiple variables of different types with same name

//---------------------------------------


APPLICATION EXAMPLES
//---------------------------------------

>>>  def last = head.rev    # returns last element

>>>  def g = rotl.popl

>>>  let x = <1,2,3,4>

>>>  g:x
     rotl.popl:<1,2,3,4>
     rotl:(popl:<1,2,3,4>)
     rotl:<2,3,4>
<<<  <3,4,2>

//---------------------------------------

>>> def second = head.tail

>>>  let lst = <0,1,2,3,4,5,6,7,8,9>

>>>  neg.second:lst
     neg.head.tail:<0,1,2,3,4,5,6,7,8,9>
     neg:(head:(tail:<0,1,2,3,4,5,6,7,8,9>))
     neg:(head:<1,2,3,4,5,6,7,8,9>)
     neg:1
<<<  -1

//---------------------------------------


F:x

G:(F:x)

H:(I:(J:x))

K:(L:(M:(N:x)))

etc...
