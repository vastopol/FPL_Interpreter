TODO

DIE

ver 1.2

* possibly add new logic functions
    universals:
        id  = identity
        elm = is element
        seq = is sequence

* func.h/cpp -> add more functions for the vm fn_pointers from the math.h library

* add a function "list" which takes an int and turns it to a list
    list:int  ->  <int>

* rename lmin && lmax to min && max
* rename sequence to list and element to int for clarity

* fix gentree so it can print out (+,-,*,/%) breaks on the symbols because of the .dot files

* irregularities with parsing
    nested lists are not supported
    using them causes unexpected behavior
    <1,<2,3,4>> -> <1,0,3,4>
    also see composition and application
    inc.abs:1 works the same as inc.abs.1
    because
    inc.abs.1 -> inc:(abs:(1))

* something is wrong with functions (should be fixed when process() is fixed... i think...)
    sort.rmdup:list # this works
    rmdup.sort:list # syntax error 1

* refactor code and update documentation

* the trim_space function doesn't handle tabs
* Ctrl-D will crash command line in endless loop

* inconsistencies with throwing exceptions or print error message and return.
    should go through and convert all error printing code to actual exception throwing.

* rewrite Makefile so less complex and ugly
* go through and remove unnecessary include statements, old inaccurate comments, other cruft...
* restructure the .cpp files so functions are defined in same order as declared in header files

* UPDATE AND CHECK ALL USER PROGRAMS AFTER CHANGES SO THEY STILL WORK

* documentation

DONE:
* rename ls -> mem
* rename dump -> memdump
* rename bufls -> buf
* new fcts command
* new history command
* new write command to append a line to buffer
* new step command to execute top instruction in buffer
* new type check command show function/expression signature
* put safety checks for div and mod by 0
* combine let and set into 1 command
    no more direct creation of element/sequences in outer interpreter
    now elements/sequences are created by toklist() in the inner interpreter
    the variables are set equal to return values from evaluating the syntax tree
* change how process() searches for strings to match for some commands
    handles the string splitting better, can name variables/functions similarly to commands
*    bools:
        nil = is empty sequence
        lt  = less than
        gt  = greater than
        eq  = equal to
        lte = less than or equal
        gte = greater than or equal
        neq = not equal
* safe_sqrt in lib.fpl is broken
    not sure how since sqrt.abs works by itself
    FIXED -- had to do with tabs and spaces in the fpl file and not proper stripping of trailing whitespace

//=============================================

ver 1.3

* add the operators name{params}:arg format part
    map{f}
    red{f}
    filt{p}
    insert{i;x}
    del{i}
    app{x}
    ccf{f1;...;fn}
    if{p;x1;x2}

let the arg be represented by @ as an abstraction
can be used for ifs

//=============================================

etc... maybe???

* convert all to floating point
* consider merging the syscom commands into interpreter functions
* perhaps latex documentation

//=============================================

actual ideas

def _sum  = red{+}
def _prod = red{*}
def alt_sum  = red{-}
def alt_prod = red{/}
def sum_squares = sum.map{square}
def _sum_squares = red{+}.map{square}
def abs = if{lt:<@,0>;neg:@;@}


potential ideas

let l = <...>
let l_avg1 = /:<sum:l,size:l>
let l_avg2 = /.app{size:l}.list.sum:l
