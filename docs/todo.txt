TODO

next:

    * improve parser functionality to overcome limitations (need better parser)
        * nested {} operators and composed expressions in operators
        * probably need to embed/pass in the parser too
        * might have to pass parser to exec to handle more complex operator usage cases

    * have @ for rhs argument reference inside some of the operators

    * refactor code and update documentation
        * inconsistencies with throwing exceptions or print error message and return in syscom.cpp
            should go through and convert all error printing returning code to actual exception throwing
        * rewrite Makefile so less complex and ugly
        * go through and remove unnecessary include statements, old inaccurate comments, other cruft...
        * restructure the .cpp files so functions are defined in same order as declared in header files
        * rename sequence to list and element to int for clarity (might)

    * UPDATE AND CHECK ALL USER PROGRAMS AFTER CHANGES SO THEY STILL WORK

etc... maybe???

    * convert all to floating point
    * perhaps latex documentation
    * consider merging the syscom commands into interpreter functions
    * might need to make some overloaded functions for the operators
        if, ccf, id, elm, seq, ...

----------------------------------------

potential ideas

pointfree form references no arguments
pointful form uses the @ operator like the alpha and omega in APL
also allowing operators called in operators
the fill{@} operator, using the @ as the right hand argument reference

def _abs = if{lt.fill{<@,0>};neg.fill{@};fill{@}}
def _abs2 = if{lt.fill{<@,0>};neg.id;id}
def _abs3 = if{lt.apr{0}.list;neg.id;id}
def _square = prod.fill{<@,@>}
def _square2 = red{*}.fill{<@,@>}
def _cube = prod.fill{<@,@,@>}
def _cube2 = red{*}.fill{<@,@,@>}
def _zero = if{eq.fill{<@,0>};~1;~0}
def _zero2 = if{eq.apr{0}.list;~1;~0}
def _even = if{zero.head.%.fill{<@,2>};~1;~0}
def _even2 = if{zero.head.%.apr{2}.list;~1;~0}
def _odd = if{not.zero.head.%.fill{<@,2>};~1;~0}
def _odd2 = if{not.zero.head.%.apr{2}.list;~1;~0}

other ideas, (need better parser)

let l = <...>
let s1 = sum:l
let s2 = size:l
let l_avg0 = /:<s1,s2>
let l_avg1 = /:<sum:l,size:l>
let l_avg2 = /.apr{size:l}.list.sum:l

----------------------------------------



