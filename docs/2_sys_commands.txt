
SYSTEM COMMANDS
commentary on using system commands && memory management
///******************************************

* help == display help message

syntax: help

show on the screen the help prompt

//----------------------------------------

* fcts == display available FPL functions

syntax: fcts

show on the screen a list of the functions available

//----------------------------------------

* def == define a function

syntax: "def name = function"

ex:     def add2 = inc.inc

the functions are text macros substituted in on interpretation.
def can also be used to rename functions

//----------------------------------------

* let == create/set variables

syntax: "let var = expr"

where expr is Element, Sequence, or Expression

let x = 3
let y = <1,2,3>
let z = rev.sort:lst

expr is any valid fpl expression returning an element or sequence.
if var does not exist yet it is created and stored in memory.
otherwise var is looked up in memory, the old variable is removed, and it
is replaced with the new object returned from evaluation of expr.

//----------------------------------------

* rm  == delete a variable from memory

syntax: "rm var"

//----------------------------------------

* dump == clear all contents of memory

syntax: "dump"

//----------------------------------------

* bufdump == clear all contents of buffer

syntax: "bufdump"

//----------------------------------------

* mem == prints contents of memory stored variables

syntax: "mem"

//----------------------------------------

* buf == prints contents of buffer

syntax: "buf"

//----------------------------------------

* load  == load content of script file to buffer

syntax: "load file.fpl"

//----------------------------------------

* run  == execute content of buffer until empty

syntax: "run"

//----------------------------------------

* print == print a newline, string, or variable. use "$" prepended to variable name

syntax: "print x"

eg:

>>> print
<<<

>>> print this is a string
<<< this is a string

>>> let x = <1,2,3>
>>> print $x
<<< <1,2,3>

//----------------------------------------

* gentree == parse an expression and print out the AST

syntax: "gentree expr"

expr is any valid fpl expression returning an element or sequence.
prints expr in prefix, infix, && postfix then generates 2 files.
output.dot is used by the program dot to produce the output.jpg file.
calls dot to produce the files using system()

//----------------------------------------

* type == print type signature of a function or expression

syntax: "type expr"

expr is any fpl expression (does not have to be valid since not actually executed)
will parse expression and print the types of each component

//----------------------------------------

* ! = execute a command by passing a string to the os with system()

syntax: "! str"

WARNING:
this can easily be dangerous cause bad things to happen
it exists mainly for convenience, debugging, etc
it can be commented out if needed.

///*********************************************


EVALUATION
///*********************************************

Evaluation is invoked if the input string is not a call to a syscom.
The input string and the current system memory contents are passed to the parser.

eg:

>>>  F:x
     eval("F:x")
     apply function F to variable x
<<<  return results

///*********************************************
