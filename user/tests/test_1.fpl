# basic testing: builtin system commands/primitives
# let, def, rm, memdump, print, help, ...

print
print TEST_1.FPL

memdump

help

#-----------------------------

print Creating Elements

# make elements
let var_a = -5
let var_b = -4
let var_c = -3
let var_d = -2
let var_e = -1
let var_f = 0
let var_g = 1
let var_h = 2
let var_i = 3
let var_j = 4
let var_k = 5

mem

#-----------------------------

print Creating Sequences

# make sequences
let seq_a = <>
let seq_b = <1>
let seq_c = <5,10>
let seq_d = <1,-4>
let seq_e = <0,0,0,0,0>
let seq_f = <1,1,1,1,1>
let seq_g = <1,2,3,4,5>
let seq_h = <-1,-2,-3,-4,-5>

mem

#-----------------------------

print Creating Functions

# define functions
def ADD2 = inc.inc
def ADD3 = inc.inc.inc
def ADD4 = inc.inc.inc.inc
def SUB2 = dec.dec
def SUB3 = dec.dec.dec
def SUB4 = dec.dec.dec.dec

mem

#-----------------------------

print Removing Variables
print

print var_k
print $var_k
print removing element
rm var_k
print var_k
print $var_k
print

print var_a
print $var_a
print removing element
rm var_a
print var_a
print $var_a
print

print seq_h
print $seq_h
print removing sequence
rm seq_h
print seq_h
print $seq_h
print

print seq_f
print $seq_f
print removing sequence
rm seq_f
print seq_f
print $seq_f
print

print ADD2
print $ADD2
print removing function
rm ADD2
print ADD2
print $ADD2
print

print SUB3
print $SUB3
print removing function
rm SUB3
print SUB3
print $SUB3
print

mem

print Dump memory

memdump

#-----------------------------

print Testing let function

let x = 0
let y = <>
let z = <1,4,9,16,25>

mem

print letting x to inc.inc.head:<1,2>
let x = inc.inc.head:<1,2>

mem

print letting y to neg.head.rev.rotl.rotl:<5,6,7,8,9,0>
let y = neg.head.rev.rotl.rotl:<5,6,7,8,9,0>

mem

print letting z multiple times
print original value
print $z

print changes
let z = 0
print $z
let z = -1
print $z
let z = <>
print $z

print letting z = x
let z = x
print $z

print letting z = y
let z = y
print $z

#-----------------------------

memdump
