TODO - Unfinished works
-------------------------

* PRIMITIVE LANGUAGE OPERATIONS (not implemented yet)

- apply-to-all  
	"@" 

- construction combining form
    "[F1,F2,...,Fn]"

 - conditial branching 
	"(H -> F,G)" 

-------------------------

* convert to floating point

* eventually add the {} environment part

expression format -> functions:{arg1;arg2}

unlimited function composition applied to argument enclosure
either 1 or 2 arguments in braces, semicolon is argument separator

# single arg
F:{1}
F:{<1,2,3>}

# two arg
F:{1;2}
F:{<1,2,3>;<4,5,6>}
F:{1;<7,8,9>}

# nested
F:{ G:{x} ; H:{y} }

//---------------------------------------------

* action.h/cpp -> complex tree traversal on AST nodes for "@", "[]", && conditionals

* func.h/cpp -> add more functions for the vm fn_pointers 

//---------------------------------------------


* possibly add a write function
write_ln()
this should write one line of text to the execution buffer -> Syscom

=======================================================================
=======================================================================

VERSION 1.0

* convert all instances of return 0 for NULL pointers to:
throw std::runtime_error("");

* resolve function definitions
parse user defined functions at the very begining
before the call to p_dot() have another function for that -> interpreter

* finish adding all unary functions -> func

* fix object construction -> interpreter (part 3) & syscom

* fix gentree -> Pattern

* clean up all source code for uniformity

-----------------------

* interpreter.h/cpp && syscom ?

fix immediate object construction, in part 3 && syscom ?

what works: 

	$$ let x = 1

	$$ let x = -1

	$$ let y = <>

	$$ let y = <1,2,3>

what fails:

(just enter immediate on command line)
	$$ -1
	<<< creates a function called -1

(any list starting with a negative)
	$$ <-1,-2,-3>
	<<< creates a list, but if first number is negative, it will lose negative sign

(set to a negative )
	$$ let x = 0
	$$ set x = -1
	<<< Error execute produces an unknown