SYSCOM:
"syscom.h" is a set of functions which are responsible for the basic user interactions with the memory and system.

variables and buffer have different dumps SO the variables can be dumped by a script.

//-----------------------------------------------------------------

CLASSES
- Pattern == compositional object / mediator
- Memory == data structure -> hold user defined variables/macros
- Node == data structure -> form of the syntax tree
- Interpreter == strategy pattern -> parsing
- Action == strategy pattern -> execution

On construction Pattern is initialized with an input string and a reference to the Memory object.
The Node pointer will initially be NULL. 

Pattern
{
    string input;   // user input
    Memory* mem;    // variable container
    Node* root;     // root of abstract syntax tree
    Interpreter* I; // for parsing
    Action* A;      // for executing
    
    // constructor, set, get, etc...
}

Memory
{
    map<string, int> elements;
    map<string, list<int> > sequences;
    map<string, string> macros;
    
    // constructor, set, get, print, etc...
}

Node
{
    std::string key;
    Node *parent, *left, *right;
    
    // constructor, set, get, etc...
}


Interpreter
{
    Node* parse(std::string);
    
    // helper functions
}


Action
{
    exec(Node*);

    // helper functions
}


-----------------------------------

????????????

object
{
    -sequence
    -connector 
        subclasses{ ':' | '.' }
    -function
        inheritance, strategy pattern?
}

nodes hold object pointer?