FP_REPL Interaction Primer
The "comprehensive" guide to syntax.

LANGUAGE COMPONENTS
///*****************************************

elements: x
sequences: <x1,...,xn>

sequences are collections of elements

() = used for separation

///******************************************

PRIMITVE OPERATIONS
///******************************************

application  "F:a"
    
    where   function F applied to value a
------------------------------------------------

composition   "F.G"

    where   (F.G):x = F:(G:x)
------------------------------------------------

apply-to-all  (FIXME)
    "@"  
    
    where   @F:<x1,...,xn>  =  <F:x1,...,F:xn>
------------------------------------------------

construction combining form (FIXME)
    "[F1,F2,...,Fn]"
    
    where   [F1,F2,...,Fn]:x  =  <F1:x,...,Fn:x>
------------------------------------------------
           
conditial branch  (FIXME)
    "(H -> F,G)" 
    
    where   (H -> F,G):x   
             =  F:x   if   H:x  =  True
             =  G:x   if   H:x  =  False
             =  undefined  otherwise

///*****************************************

ELEMENT OPERATIONS (add & multiply are symbols all else are LABELS)
///*****************************************

- NEG == negate, take opposite sign of number
- ABS == take absolute value of number
- INC == increment (plus 1)
- DEC == decrement (minus 1)
- SQUARE == second power
- CUBE == third power
- SQRT == square root

///*****************************************

SEQUENCE OPERATIONS
///*****************************************
  
RETURN TYPE (ELEMENT)  
- SIZE == number of elements in list
- HEAD == first element of sequence
- LMAX  == maximum value in sequence
- LMIN  == minimum value in sequence

RETURN TYPE (SEQUENCE)
- TAIL == sequence from second to end
- ROTR == rotate sequence elements to the right
- ROTL == rotate sequence elements to the left 
- REV  == reverse sequence elements order
- POPL == pop element from left of sequence
- POPR == pop element from right of sequence
- SORT == sort sequence elements in ascending order
- RMDUP == remove duplicates, preserves order

///*****************************************


GUIDELINES ON PROGRAMMING
///*******************************

- Functions are written in Uppercase 

- Variable names should only contain Lowercase letters
- Each variable should be given a unique name
- Avoid having multiple variables defined as same value


the best option is:
use def LIKE how composition works
the macros can be used to lable a composition
the macros will be substituted in during interpretation

ex:
>>> def G = ROTL.POPL
>>> let x = <1,2,3,4>

then use like:
>>> G:x
    G:x
    ROTL.POPL:<1,2,3,4>
    ROTL:(POPL:(<1,2,3,4>))
    ROTL:(<2,3,4>)
<<< <3,4,2>

///**************************************************

FUNCTION APPLICATION EXAMPLES

let lst = <0,1,2,3,4,5,6,7,8,9>

>>>  SECOND:lst
     HEAD.TAIL:<0,1,2,3,4,5,6,7,8,9>
     HEAD:(TAIL:<0,1,2,3,4,5,6,7,8,9>)
     HEAD:<1,2,3,4,5,6,7,8,9>
<<<  1
  
///***************************************************

F:x

G:(F:x)

H:(I:(J:x))
