FP_REPL Interaction Guide
The "comprehensive" guide to FP_REPL syntax.

LANGUAGE COMPONENTS
///*****************************************

elements: x
constant: ~x
sequences: <x1,...,xn>

constants are special elements that cannot change value (used more like a function...)
application of a constant to something returns the constant

sequences are collections of elements

() = used for separation

///******************************************

PRIMITVE OPERATIONS
///******************************************

application  "F:a"
    
    where   function F applied to value a
------------------------------------------------

composition   "F.G"

    where   (F.G):x = F:(G:x)
------------------------------------------------

construction combining form
    "[F1,F2,...,Fn]"
    
    where   [F1,F2,...,Fn]:x  =  <F1:x,...,Fn:x>
------------------------------------------------
    
apply-to-all  "@"  
    
    where   @F:<x1,...,xn>  =  <F:x1,...,F:xn>
------------------------------------------------
        
condition  "(H -> F,G)" 
    
    where   (H -> F,G):x   
             =  F:x   if   H:x  =  True
             =  G:x   if   H:x  =  False
             =  undefined  otherwise

///*****************************************

ELEMENT OPERATIONS (add & multiply are symbols all else are LABELS)
///*****************************************
- addition (+) == add two numbers
- multiply (*) == multiply two numbers
- NEG == negate, take opposite of number
- ABS == take absolute value of number

///*****************************************

SEQUENCE OPERATIONS
///*****************************************
  
RETURN TYPE (ELEMENT)  
- MAX  == maximum value in sequence
- MIN  == minimum value in sequence
- SIZE == number of elements in list
- HEAD == first element of sequence
    
RETURN TYPE (SEQUENCE)
- TAIL == sequence from second to end
- REV  == reverse sequence elements order
- ROTR == rotate sequence elements to the right
- ROTL == rotate sequence elements to the left 

///*****************************************


GUIDELINES ON PROGRAMMING
///*******************************

- Functions are written in Uppercase 
- Macros are written in Uppercase

- Variable names should only contain Lowercase letters
- Each variable should be given a unique name
- Try to avoid having multiple variables defined as same value


the best option is:
use def LIKE how composition works
the macros can be used to lable a composition
the macros will be substituted in during interpretation

ex:
>>> def G = ROTL.CAT
>>> let x = <1,2,3>
>>> let y = <5,6,7>

then use like:
>>> %G:(x,y)
    G:(x,y) 
    ROTL.CAT:(<1,2,3>, <5,6,7>)
    ROTL:(CAT:(<1,2,3>, <5,6,7>))
    ROTL:<1,2,3,5,6,7>
<<< <2,3,5,6,7,1>

///**************************************************

FUNCTION APPLICATION EXAMPLES

see user/vars.fps for implementation library

let list = <0,1,2,3,4,5,6,7,8,9>

% SECOND:list
  HEAD.TAIL:<0,1,2,3,4,5,6,7,8,9>
  HEAD:(TAIL:<0,1,2,3,4,5,6,7,8,9>)
  HEAD:<1,2,3,4,5,6,7,8,9>
  1
  
