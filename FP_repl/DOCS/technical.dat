

SYSTEM CALLS (for memory management)
///******************************************

* let == set variables

syntax: let name = value

where element
   name = atom   
   x = 3
   
OR

where sequence
   name = <atom,...,atom>   
   s = <1,2,3>
   
   NO SPACES BETWEEN COMMAS
//----------------------------------------

* def == compositional function

syntax: def name = function

the functions are macros substituted in on interpretation

//----------------------------------------

* rm  == delete variable from memory

syntax: rm var

//----------------------------------------

* ls == prints contents of memory stored variables

syntax: ls

///*********************************************


EVALUATION
///*********************************************

Evaluation is invoked with the special symbol '#'
When the '#' is the first character in the input string,
evaluation is called on the sequence of characters immediately after.
eg.
>>> #F:x
evaluate("F:x").
evaluate(apply function f to variable x).
return result.

///*********************************************


GUIDELINES
///*******************************
- Functions are written in Uppercase 
- Macros are written in Uppercase

- Variable names should only contain Lowercase letters
- Each variable should be given a unique name
- Try to avoid having multiple variables defined as same value


the best option is:
use def LIKE how composition works
the macros can be used to lable a composition
the macros will be substituted in during interpretation

ex:
>>> def G = ROTL.CAT
>>> let x = <1,2,3>
>>> let y = <5,6,7>

then use like:
>>> #G:(x,y)
    G:(x,y) 
    ROTL.CAT:(<1,2,3>, <5,6,7>)
    ROTL:(CAT:(<1,2,3>, <5,6,7>))
    ROTL:<1,2,3,5,6,7>
<<< <2,3,5,6,7,1>

///**************************************************