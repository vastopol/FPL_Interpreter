Technical stuff on memory management && system

SYSTEM CALLS (for memory management)
///******************************************

* let == set variables

syntax: "let name = value"

where element
   name = atom   
   x = 3
   
OR

where sequence
   name = <atom,...,atom>   
   s = <1,2,3>
//----------------------------------------

* def == compositional function

syntax: "def name = function"

ex:   def LAST = HEAD.REV    # returns last element

the functions are macros substituted in on interpretation
//----------------------------------------

* rm  == delete variable from memory

syntax: "rm var"
//----------------------------------------

* dump == clear all contents of memory stored variables

syntax: "dump"
//----------------------------------------

* bufdump == clear all contents of buffer

syntax: "bufdump"
//----------------------------------------

* ls == prints contents of memory stored variables

syntax: "ls"
//----------------------------------------

* bufls == prints contents of buffer

syntax: "bufls"
//----------------------------------------

* load  == load content of script file to buffer

syntax: "load file.fpl"
//----------------------------------------

* run  == execute content of buffer

syntax: "run"

///*********************************************

* print == print a string or variable, use "$" prepended to variable name 
	
eg.
	>>> print this is a string
	<<< this is a string

	>>> let x = <1,2,3>
	>>> print $x
	<<< <1,2,3>
 //****************************************

 * gentree == parse expr and print the AST

 eg.
 >>> gentree F.G:<1,2,3>
 
 argument is an expression to parse
//**************************************** 

EVALUATION
///*********************************************

Upon user input, string is checked to see if is a syscom.
Evaluation is invoked if the input is not a call to syscom.
evaluation is called on the sequence of characters.
eg.

# evaluation
>>> F:x
    evaluate("F:x")
    apply function f to variable x
    return result.

# syscom
>>> ls
    call to syscom, prints memory content

///*********************************************
